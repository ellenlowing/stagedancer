#import <perlinnoise2d.sca>
#import <gradients>
#import <sdf>
#import <utils>

// https://thebookofshaders.com/edit.php?log=160414041142
float smoothedge(float v, float blur) {
  vec2 sz = std::getRenderTargetSize();
  return smoothstep(0.0 - blur*3.0, blur + 1.0 / sz.x, v);
} 

float circle(vec2 p, float radius) {
return std::safeLength(p) - radius;
}

// @return patch output
vec4 main(vec3 pos) {
  vec4 color = vec4(0.);

  vec4 position = std::getVertexPosition();
  vec2 uv = fragment(std::getVertexTexCoord());

  // use particle's distance from emission point to calculate...
  float particleDistance = std::safeDistance(position.xyz, pos);
  float pnoise2d = cnoise(position.xy * std::getTime()) * 0.05 - 0.025;
  float circ = circle(uv - vec2(0.5 + pnoise2d, 0.5), 0.02);
  circ = 1.0 - smoothedge(circ, 0.025);

  color = vec4(1., 1., 1., circ);
  // color.a *= particleDistance;

  return color;
}